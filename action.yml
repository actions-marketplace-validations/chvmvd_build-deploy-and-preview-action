---
name: Build, Deploy to GitHub Pages and Deploy PR Preview
author: WATAHIKI Yuto
description: Build, Deploy to GitHub Pages and Deploy PR Preview
inputs:
  type:
    description: Type of the project(`vite` is the only supported type for now)
    required: true
  rootDir:
    description: Root directory of the project
    required: false
    default: .
  folder:
    description: Folder to deploy(If set to `auto`, it will use the default folder for the type of the project.)
    required: false
    default: auto
  pr-preview:
    description: Whether to deploy PR Preview(`true` or `false`)
    required: false
    default: true
  production-branch:
    description: Branch that contains the production code(Default is the default branch of the repository)
    required: false
    default: ${{ github.event.repository.default_branch }}
  development-branch:
    description: Branch that contains the development code
    required: false
    default: ""
  deployment-branch:
    description: Branch that the project will be deployed to
    required: false
    default: gh-pages
  umbrella-dir:
    description: Directory containing all previews
    required: false
    default: pr-preview
  custom-url:
    description: Custom URL to deploy
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Determine the folder to deploy
      id: folder
      uses: actions/github-script@v6
      with:
        script: |
          const typeInput = "${{ inputs.type }}";
          const folderInput = "${{ inputs.folder }}";
          if (folderInput === "auto") {
            if (typeInput === "vite") {
              return "dist";
            }
          } else {
            return folderInput;
          }
        result-encoding: string

    - name: Make BASE_URL
      id: base-url
      uses: actions/github-script@v6
      env:
        DEVELOPMENT_BRANCHES: ${{ inputs.development-branch }}
      with:
        script: |
          const githubEventName = "${{ github.event_name }}";
          const githubRepository = "${{ github.repository }}"; // owner/repo
          const githubRepositoryOwner = "${{ github.repository_owner }}"; // owner
          const githubRepositoryName = githubRepository.slice(githubRepositoryOwner.length + 1); // repo
          let productionBaseUrl = "";
          if (githubRepositoryName !== `${githubRepositoryOwner}.github.io` && "${{ inputs.custom-url }}" === "") {
            productionBaseUrl = `/${githubRepositoryName}`; // /repo
          }
          if (githubEventName === "push") {
            const githubBranchName = "${{ github.ref_name }}"; // branch
            const developmentBranches = process.env.DEVELOPMENT_BRANCHES.split("\n");
            // base URL of the production site
            if (githubEventName === "push" && githubBranchName === "${{ inputs.production-branch }}") {
              const baseUrl = productionBaseUrl;
              return baseUrl; // /repo
            }
            // base URL of the development site
            else if (githubEventName === "push" && developmentBranches.includes(githubBranchName)) {
              const baseUrl = `${productionBaseUrl}/${githubBranchName}`;
              return baseUrl; // /repo/branch
            }
          } else if (githubEventName === "pull_request") {
            const refName = "${{ github.ref_name }}"; // PR_NUMBER/merge
            const prNumber = refName.slice(0, refName.length - 6); // PR_NUMBER
            const baseUrl = `${productionBaseUrl}/pr-preview/pr-${prNumber}`;
            return baseUrl; // /repo/pr-preview/pr-PR_NUMBER
          }
        result-encoding: string

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Cache npm packages
      id: npm-cache
      uses: actions/cache@v3
      with:
        path: "**/node_modules"
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install npm packages
      if: steps.npm-cache.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.rootDir }}
      run: npm ci
      shell: bash

    - name: Build Vite project
      if: ${{ inputs.type == 'vite' }}
      working-directory: ${{ inputs.rootDir }}
      run: npx vite build --base ${{ steps.base-url.outputs.result }}/
      shell: bash

    - name: Deploy Production to GitHub Pages
      if: ${{ github.event_name == 'push' && github.ref_name == inputs.production-branch }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{ inputs.rootDir }}/${{ steps.folder.outputs.result }}
        clean-exclude: |
          ${{ inputs.umbrella-dir }}
          ${{ inputs.development-branch }}

    - name: Deploy Development to GitHub Pages
      if: ${{ github.event_name == 'push' && contains(inputs.development-branch, github.ref_name) }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{ inputs.rootDir }}/${{ steps.folder.outputs.result }}
        target-folder: ${{ github.ref_name }}

    - name: Deploy PR Preview
      if: ${{ github.event_name == 'pull_request' && inputs.pr-preview == 'true' }}
      uses: rossjrw/pr-preview-action@v1
      with:
        source-dir: ${{ inputs.rootDir }}/${{ steps.folder.outputs.result }}
        preview-branch: ${{ inputs.deployment-branch }}
        umbrella-dir: ${{ inputs.umbrella-dir }}
        custom-url: ${{ inputs.custom-url }}

branding:
  icon: git-branch
  color: gray-dark
